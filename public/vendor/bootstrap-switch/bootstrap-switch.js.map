{"version":3,"sources":["bootstrap-switch.js"],"names":[],"mappingsfile":"bootstrap-switch.js","sourcesContent":["import jquery from 'jquery';\n\nconst $ = jquery || window.jQuery || window.$;\n\nfunction getClasses(options, id) {\n  const { state, size, disabled, readonly, indeterminate, inverse } = options;\n  return [\n    state ? 'on' : 'off',\n    size,\n    disabled ? 'disabled' : undefined,\n    readonly ? 'readonly' : undefined,\n    indeterminate ? 'indeterminate' : undefined,\n    inverse ? 'inverse' : undefined,\n    id ? `id-${id}` : undefined,\n  ].filter(v => v == null);\n}\n\n\nfunction prvgetElementOptions() {\n  return {\n    state: this.$element.is(':checked'),\n    size: this.$element.data('size'),\n    animate: this.$element.data('animate'),\n    disabled: this.$element.is(':disabled'),\n    readonly: this.$element.is('[readonly]'),\n    indeterminate: this.$element.data('indeterminate'),\n    inverse: this.$element.data('inverse'),\n    radioAllOff: this.$element.data('radio-all-off'),\n    onColor: this.$element.data('on-color'),\n    offColor: this.$element.data('off-color'),\n    onText: this.$element.data('on-text'),\n    offText: this.$element.data('off-text'),\n    labelText: this.$element.data('label-text'),\n    handleWidth: this.$element.data('handle-width'),\n    labelWidth: this.$element.data('label-width'),\n    baseClass: this.$element.data('base-class'),\n    wrapperClass: this.$element.data('wrapper-class'),\n  };\n}\n\nfunction prvwidth() {\n  const $handles = this.$on\n    .add(this.$off)\n    .add(this.$label)\n    .css('width', '');\n  const handleWidth = this.options.handleWidth === 'auto'\n    ? Math.round(Math.max(this.$on.width(), this.$off.width()))\n    : this.options.handleWidth;\n  $handles.width(handleWidth);\n  this.$label.width((index, width) => {\n    if (this.options.labelWidth !== 'auto') { return this.options.labelWidth; }\n    if (width < handleWidth) { return handleWidth; }\n    return width;\n  });\n  this.privateHandleWidth = this.$on.outerWidth();\n  this.privateLabelWidth = this.$label.outerWidth();\n  this.$container.width((this.privateHandleWidth * 2) + this.privateLabelWidth);\n  return this.$wrapper.width(this.privateHandleWidth + this.privateLabelWidth);\n}\n\nfunction prvcontainerPosition(state = this.ope) {\n  this.$container.css('margin-left', () => {\n    const values = [0, `-${this.privateHandleWidth}px`];\n    if (this.options.indeterminate) {\n      return `-${this.privateHandleWidth / 2}px`;\n    }\n    if (state) {\n      if (this.options.inverse) {\n        return values[1];\n      }\n      return values[0];\n    }\n    if (this.options.inverse) {\n      return values[0];\n    }\n    return values[1];\n  });\n}\n\nfunction prvgetClass(name) {\n  return `${this.options.baseClass}-${name}`;\n}\n\nfunction prvinit() {\n  const init = () => {\n    this.setPrevOptions();\n    this::prvwidth();\n    this::prvcontainerPosition();\n    setTimeout(() => (\n      this.options.animate &&\n      this.$wrapper.addClass(this::prvgetClass('animate'),\n    )), 50);\n  };\n  if (this.$wrapper.is(':visible')) {\n    init();\n    return;\n  }\n  const initInterval = window.setInterval(\n    () => (\n      this.$wrapper.is(':visible') &&\n      (init() || true) &&\n      window.clearInterval(initInterval)\n    ), 50);\n}\n\nfunction prvelementHandlers() {\n  return this.$element.on({\n    'setPreviousOptions.bootstrapSwitch': () => this.setPrevOptions(),\n\n    'previousState.bootstrapSwitch': () => {\n      this.options = this.prevOptions;\n      if (this.options.indeterminate) {\n        this.$wrapper.addClass(this::prvgetClass('indeterminate'));\n      }\n      this.$element\n        .prop('checked', this.options.state)\n        .trigger('change.bootstrapSwitch', true);\n    },\n\n    'change.bootstrapSwitch': (event, skip) => {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      const state = this.$element.is(':checked');\n      this::prvcontainerPosition(state);\n      if (state === this.options.state) {\n        return;\n      }\n      this.options.state = state;\n      this.$wrapper\n        .toggleClass(this::prvgetClass('off'))\n        .toggleClass(this::prvgetClass('on'));\n      if (!skip) {\n        if (this.$element.is(':radio')) {\n          $(`[name=\"${this.$element.attr('name')}\"]`)\n            .not(this.$element)\n            .prop('checked', false)\n            .trigger('change.bootstrapSwitch', true);\n        }\n        this.$element.trigger('switchChange.bootstrapSwitch', [state]);\n      }\n    },\n\n    'focus.bootstrapSwitch': (event) => {\n      event.preventDefault();\n      this.$wrapper.addClass(this::prvgetClass('focused'));\n    },\n\n    'blur.bootstrapSwitch': (event) => {\n      event.preventDefault();\n      this.$wrapper.removeClass(this::prvgetClass('focused'));\n    },\n\n    'keydown.bootstrapSwitch': (event) => {\n      if (!event.which || this.options.disabled || this.options.readonly) {\n        return;\n      }\n      if (event.which === 37 || event.which === 39) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        this.state(event.which === 39);\n      }\n    },\n  });\n}\n\nfunction prvhandleHandlers() {\n  this.$on.on('click.bootstrapSwitch', (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    this.state(false);\n    return this.$element.trigger('focus.bootstrapSwitch');\n  });\n  return this.$off.on('click.bootstrapSwitch', (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    this.state(true);\n    return this.$element.trigger('focus.bootstrapSwitch');\n  });\n}\n\nfunction prvlabelHandlers() {\n  let dragStart;\n  let dragEnd;\n  const handlers = {\n    click(event) { event.stopPropagation(); },\n\n    'mousedown.bootstrapSwitch touchstart.bootstrapSwitch': (event) => {\n      if (dragStart || this.options.disabled || this.options.readonly) {\n        return;\n      }\n      event.preventDefault();\n      event.stopPropagation();\n      dragStart = (event.pageX || event.originalEvent.touches[0].pageX) - parseInt(this.$container.css('margin-left'), 10);\n      if (this.options.animate) {\n        this.$wrapper.removeClass(this::prvgetClass('animate'));\n      }\n      this.$element.trigger('focus.bootstrapSwitch');\n    },\n\n    'mousemove.bootstrapSwitch touchmove.bootstrapSwitch': (event) => {\n      if (dragStart == null) { return; }\n      const difference = (event.pageX || event.originalEvent.touches[0].pageX) - dragStart;\n      event.preventDefault();\n      if (difference < -this.privateHandleWidth || difference > 0) { return; }\n      dragEnd = difference;\n      this.$container.css('margin-left', `${dragEnd}px`);\n    },\n\n    'mouseup.bootstrapSwitch touchend.bootstrapSwitch': (event) => {\n      if (!dragStart) { return; }\n      event.preventDefault();\n      if (this.options.animate) {\n        this.$wrapper.addClass(this::prvgetClass('animate'));\n      }\n      if (dragEnd) {\n        const state = dragEnd > -(this.privateHandleWidth / 2);\n        dragEnd = false;\n        this.state(this.options.inverse ? !state : state);\n      } else {\n        this.state(!this.options.state);\n      }\n      dragStart = false;\n    },\n\n    'mouseleave.bootstrapSwitch': () => {\n      this.$label.trigger('mouseup.bootstrapSwitch');\n    },\n  };\n  this.$label.on(handlers);\n}\n\nfunction prvexternalLabelHandler() {\n  const $externalLabel = this.$element.closest('label');\n  $externalLabel.on('click', (event) => {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    if (event.target === $externalLabel[0]) {\n      this.toggleState();\n    }\n  });\n}\n\nfunction prvformHandler() {\n  function isBootstrapSwitch() {\n    return $(this).data('bootstrap-switch');\n  }\n\n  function performReset() {\n    return $(this).bootstrapSwitch('state', this.checked);\n  }\n\n  const $form = this.$element.closest('form');\n  if ($form.data('bootstrap-switch')) {\n    return;\n  }\n  $form\n    .on('reset.bootstrapSwitch', () => {\n      window.setTimeout(() => {\n        $form.find('input')\n          .filter(isBootstrapSwitch)\n          .each(performReset);\n      }, 1);\n    })\n    .data('bootstrap-switch', true);\n}\n\nfunction prvgetClasses(classes) {\n  if (!$.isArray(classes)) {\n    return [this::prvgetClass(classes)];\n  }\n  return classes.map(v => this::prvgetClass(v));\n}\n\n\nclass BootstrapSwitch {\n  constructor(element, options = {}) {\n    this.$element = $(element);\n    this.options = $.extend(\n      {},\n      $.fn.bootstrapSwitch.defaults,\n      this::prvgetElementOptions(),\n      options,\n    );\n    this.prevOptions = {};\n    this.$wrapper = $('<div>', {\n      class: () => getClasses(this.options, this.$element.attr('id'))\n        .map(v => this::prvgetClass(v))\n        .concat([this.options.baseClass], this::prvgetClasses(this.options.wrapperClass))\n        .join(' '),\n    });\n    this.$container = $('<div>', { class: this::prvgetClass('container') });\n    this.$on = $('<span>', {\n      html: this.options.onText,\n      class: `${this::prvgetClass('handle-on')} ${this::prvgetClass(this.options.onColor)}`,\n    });\n    this.$off = $('<span>', {\n      html: this.options.offText,\n      class: `${this::prvgetClass('handle-off')} ${this::prvgetClass(this.options.offColor)}`,\n    });\n    this.$label = $('<span>', {\n      html: this.options.labelText,\n      class: this::prvgetClass('label'),\n    });\n\n    this.$element.on('init.bootstrapSwitch', () => this.options.onInit(element));\n    this.$element.on('switchChange.bootstrapSwitch', (...args) => {\n      if (this.options.onSwitchChange.apply(element, args) === false) {\n        if (this.$element.is(':radio')) {\n          $(`[name=\"${this.$element.attr('name')}\"]`).trigger('previousState.bootstrapSwitch', true);\n        } else {\n          this.$element.trigger('previousState.bootstrapSwitch', true);\n        }\n      }\n    });\n\n    this.$container = this.$element.wrap(this.$container).parent();\n    this.$wrapper = this.$container.wrap(this.$wrapper).parent();\n    this.$element\n      .before(this.options.inverse ? this.$off : this.$on)\n      .before(this.$label)\n      .before(this.options.inverse ? this.$on : this.$off);\n\n    if (this.options.indeterminate) {\n      this.$element.prop('indeterminate', true);\n    }\n\n    this::prvinit();\n    this::prvelementHandlers();\n    this::prvhandleHandlers();\n    this::prvlabelHandlers();\n    this::prvformHandler();\n    this::prvexternalLabelHandler();\n    this.$element.trigger('init.bootstrapSwitch', this.options.state);\n  }\n\n  setPrevOptions() {\n    this.prevOptions = { ...this.options };\n  }\n\n  state(value, skip) {\n    if (typeof value === 'undefined') { return this.options.state; }\n    if (\n      (this.options.disabled || this.options.readonly) ||\n      (this.options.state && !this.options.radioAllOff && this.$element.is(':radio'))\n    ) { return this.$element; }\n    if (this.$element.is(':radio')) {\n      $(`[name=\"${this.$element.attr('name')}\"]`).trigger('setPreviousOptions.bootstrapSwitch');\n    } else {\n      this.$element.trigger('setPreviousOptions.bootstrapSwitch');\n    }\n    if (this.options.indeterminate) {\n      this.indeterminate(false);\n    }\n    this.$element\n      .prop('checked', Boolean(value))\n      .trigger('change.bootstrapSwitch', skip);\n    return this.$element;\n  }\n\n  toggleState(skip) {\n    if (this.options.disabled || this.options.readonly) { return this.$element; }\n    if (this.options.indeterminate) {\n      this.indeterminate(false);\n      return this.state(true);\n    }\n    return this.$element.prop('checked', !this.options.state).trigger('change.bootstrapSwitch', skip);\n  }\n\n  size(value) {\n    if (typeof value === 'undefined') { return this.options.size; }\n    if (this.options.size != null) {\n      this.$wrapper.removeClass(this::prvgetClass(this.options.size));\n    }\n    if (value) {\n      this.$wrapper.addClass(this::prvgetClass(value));\n    }\n    this::prvwidth();\n    this::prvcontainerPosition();\n    this.options.size = value;\n    return this.$element;\n  }\n\n  animate(value) {\n    if (typeof value === 'undefined') { return this.options.animate; }\n    if (this.options.animate === Boolean(value)) { return this.$element; }\n    return this.toggleAnimate();\n  }\n\n  toggleAnimate() {\n    this.options.animate = !this.options.animate;\n    this.$wrapper.toggleClass(this::prvgetClass('animate'));\n    return this.$element;\n  }\n\n  disabled(value) {\n    if (typeof value === 'undefined') { return this.options.disabled; }\n    if (this.options.disabled === Boolean(value)) { return this.$element; }\n    return this.toggleDisabled();\n  }\n\n  toggleDisabled() {\n    this.options.disabled = !this.options.disabled;\n    this.$element.prop('disabled', this.options.disabled);\n    this.$wrapper.toggleClass(this::prvgetClass('disabled'));\n    return this.$element;\n  }\n\n  readonly(value) {\n    if (typeof value === 'undefined') { return this.options.readonly; }\n    if (this.options.readonly === Boolean(value)) { return this.$element; }\n    return this.toggleReadonly();\n  }\n\n  toggleReadonly() {\n    this.options.readonly = !this.options.readonly;\n    this.$element.prop('readonly', this.options.readonly);\n    this.$wrapper.toggleClass(this::prvgetClass('readonly'));\n    return this.$element;\n  }\n\n  indeterminate(value) {\n    if (typeof value === 'undefined') { return this.options.indeterminate; }\n    if (this.options.indeterminate === Boolean(value)) { return this.$element; }\n    return this.toggleIndeterminate();\n  }\n\n  toggleIndeterminate() {\n    this.options.indeterminate = !this.options.indeterminate;\n    this.$element.prop('indeterminate', this.options.indeterminate);\n    this.$wrapper.toggleClass(this::prvgetClass('indeterminate'));\n    this::prvcontainerPosition();\n    return this.$element;\n  }\n\n  inverse(value) {\n    if (typeof value === 'undefined') { return this.options.inverse; }\n    if (this.options.inverse === Boolean(value)) { return this.$element; }\n    return this.toggleInverse();\n  }\n\n  toggleInverse() {\n    this.$wrapper.toggleClass(this::prvgetClass('inverse'));\n    const $on = this.$on.clone(true);\n    const $off = this.$off.clone(true);\n    this.$on.replaceWith($off);\n    this.$off.replaceWith($on);\n    this.$on = $off;\n    this.$off = $on;\n    this.options.inverse = !this.options.inverse;\n    return this.$element;\n  }\n\n  onColor(value) {\n    if (typeof value === 'undefined') { return this.options.onColor; }\n    if (this.options.onColor) {\n      this.$on.removeClass(this::prvgetClass(this.options.onColor));\n    }\n    this.$on.addClass(this::prvgetClass(value));\n    this.options.onColor = value;\n    return this.$element;\n  }\n\n  offColor(value) {\n    if (typeof value === 'undefined') { return this.options.offColor; }\n    if (this.options.offColor) {\n      this.$off.removeClass(this::prvgetClass(this.options.offColor));\n    }\n    this.$off.addClass(this::prvgetClass(value));\n    this.options.offColor = value;\n    return this.$element;\n  }\n\n  onText(value) {\n    if (typeof value === 'undefined') { return this.options.onText; }\n    this.$on.html(value);\n    this::prvwidth();\n    this::prvcontainerPosition();\n    this.options.onText = value;\n    return this.$element;\n  }\n\n  offText(value) {\n    if (typeof value === 'undefined') { return this.options.offText; }\n    this.$off.html(value);\n    this::prvwidth();\n    this::prvcontainerPosition();\n    this.options.offText = value;\n    return this.$element;\n  }\n\n  labelText(value) {\n    if (typeof value === 'undefined') { return this.options.labelText; }\n    this.$label.html(value);\n    this::prvwidth();\n    this.options.labelText = value;\n    return this.$element;\n  }\n\n  handleWidth(value) {\n    if (typeof value === 'undefined') { return this.options.handleWidth; }\n    this.options.handleWidth = value;\n    this::prvwidth();\n    this::prvcontainerPosition();\n    return this.$element;\n  }\n\n  labelWidth(value) {\n    if (typeof value === 'undefined') { return this.options.labelWidth; }\n    this.options.labelWidth = value;\n    this::prvwidth();\n    this::prvcontainerPosition();\n    return this.$element;\n  }\n\n  baseClass() {\n    return this.options.baseClass;\n  }\n\n  wrapperClass(value) {\n    if (typeof value === 'undefined') { return this.options.wrapperClass; }\n    const wrapperClass = value || $.fn.bootstrapSwitch.defaults.wrapperClass;\n    this.$wrapper.removeClass(this::prvgetClasses(this.options.wrapperClass).join(' '));\n    this.$wrapper.addClass(this::prvgetClasses(wrapperClass).join(' '));\n    this.options.wrapperClass = wrapperClass;\n    return this.$element;\n  }\n\n  radioAllOff(value) {\n    if (typeof value === 'undefined') { return this.options.radioAllOff; }\n    const val = Boolean(value);\n    if (this.options.radioAllOff === val) { return this.$element; }\n    this.options.radioAllOff = val;\n    return this.$element;\n  }\n\n  onInit(value) {\n    if (typeof value === 'undefined') { return this.options.onInit; }\n    this.options.onInit = value || $.fn.bootstrapSwitch.defaults.onInit;\n    return this.$element;\n  }\n\n  onSwitchChange(value) {\n    if (typeof value === 'undefined') {\n      return this.options.onSwitchChange;\n    }\n    this.options.onSwitchChange =\n      value || $.fn.bootstrapSwitch.defaults.onSwitchChange;\n    return this.$element;\n  }\n\n  destroy() {\n    const $form = this.$element.closest('form');\n    if ($form.length) {\n      $form.off('reset.bootstrapSwitch').removeData('bootstrap-switch');\n    }\n    this.$container\n      .children()\n      .not(this.$element)\n      .remove();\n    this.$element\n      .unwrap()\n      .unwrap()\n      .off('.bootstrapSwitch')\n      .removeData('bootstrap-switch');\n    return this.$element;\n  }\n}\n\nfunction bootstrapSwitch(option, ...args) {\n  function reducer(ret, next) {\n    const $this = $(next);\n    const existingData = $this.data('bootstrap-switch');\n    const data = existingData || new BootstrapSwitch(next, option);\n    if (!existingData) {\n      $this.data('bootstrap-switch', data);\n    }\n    if (typeof option === 'string') {\n      return data[option](...args);\n    }\n    return ret;\n  }\n  return Array.prototype.reduce.call(this, reducer, this);\n}\n\n$.fn.bootstrapSwitch = bootstrapSwitch;\n$.fn.bootstrapSwitch.Constructor = BootstrapSwitch;\n$.fn.bootstrapSwitch.defaults = {\n  state: true,\n  size: null,\n  animate: true,\n  disabled: false,\n  readonly: false,\n  indeterminate: false,\n  inverse: false,\n  radioAllOff: false,\n  onColor: 'primary',\n  offColor: 'default',\n  onText: 'ON',\n  offText: 'OFF',\n  labelText: '&nbsp',\n  handleWidth: 'auto',\n  labelWidth: 'auto',\n  baseClass: 'bootstrap-switch',\n  wrapperClass: 'wrapper',\n  onInit: () => {},\n  onSwitchChange: () => {},\n};\n"]}